swagger: "2.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Pool API
consumes:
  - application/json
produces:
  - application/json

paths:

  /chemicals:
    get:
      operationId: api.objects.chemicals.read_all
      tags:
        - Chemicals
      summary: Read all Chemicals.
      description: Read all Chemicals from Chemicals table sorted by ChemicalID.
      responses:
        200:
          description: Successfully read Chemicals table.
          schema:
            type: array
            items:
              properties:
                chemicalid:
                  type: integer
                  description: ID of the Chemical returned.
                chemical_name:
                  type: string
                  description: Name of the Chemical returned.
                chemical_brand:
                  type: string
                  description: Brand of the Chemical returned.
                chemical_unit:
                  type: string
                  description: Unit of measurement for the Chemical returned.
    post:
      operationId: api.objects.chemicals.create
      tags:
        - Chemicals
      summary: Create a Chemical.
      description: Insert a new Chemical into the Chemicals table.
      parameters:
        - name: chemical
          in: body
          description: JSON with Chemical components to insert.
          required: True
          schema:
            type: object
            properties:
              chemical_name:
                type: string
                description: Name of the Chemical to insert.
              chemical_brand:
                type: string
                description: Brand of the Chemical to insert.
              chemical_unit:
                type: string
                description: Unit of measurement for the Chemical to insert.
      responses:
        201:
          description: Successfully inserted Chemical into Chemicals table.
        409:
          description: Submitted Chemical already exists in Chemicals table.
  
  /chemicals/{chemicalid}:
    get:
      operationId: api.objects.chemicals.read_id
      tags:
        - Chemicals
      summary: Read Chemical by ID.
      description: Return Chemical matching submitted ChemicalID.
      parameters:
        - name: chemicalid
          in: path
          description: ID of the Chemical to search and return.
          type: integer
          required: True
      responses:
        200:
          description: Successfully found Chemical matching ID submitted.
          schema:
            type: object
            properties:
              chemicalid:
                type: integer
                description: ID of the Chemical returned.
              chemical_name:
                type: string
                description: Name of the Chemical returned.
              chemical_brand:
                type: string
                description: Brand of the Chemical returned.
              chemical_unit:
                type: string
                description: Unit of measurement for the Chemical returned.
    put:
      operationId: api.objects.chemicals.update
      tags:
        - Chemicals
      summary: Update Chemical by ID.
      description: Update the data for the Chemical that matches the ID submitted.
      parameters:
        - name: chemicalid
          in: path
          description: ID of Chemical to update.
          type: integer
          required: True
        - name: chemical
          in: body
          description: Chemical object with update data to apply.
          required: True
          schema:
            type: object
            properties:
              chemical_name:
                type: string
                description: Name of Chemical to apply on update.
              chemical_brand:
                type: string
                description: Brand of Chemical to apply on update.
              chemical_units:
                type: string
                description: Unit of Measurement to apply on update.
      responses:
        200:
          description:  Successfully applied Update to ID submitted.
          schema:
            properties:
              chemicalid:
                type: integer
                description: ID of the Chemical updated.
              chemical_name:
                type: string
                description: Updated Chemical name.
              chemical_brand:
                type: string
                description: Updated Chemical brand.
              chemical_units:
                string:
                description: Updated Chemical Units of Measurement
        409:
          description: Chemical already exists with Name and Brand submitted.
        404:
          description: Chemical does not exist at ID submitted.
    delete:
      operationId: api.objects.chemicals.delete
      tags:
        - Chemicals
      summary: Delete a Chemical.
      description: Delete the Chemical that matches the ID submitted.
      parameters:
        - name: chemicalid
          in: path
          type: integer
          description: ID of the Chemical to delete.
          required: True
      responses:
        200:
          description: Successfully deleted Chemical at ID submitted.

  /chemicals/{chemical_name}:
    get:
      operationId: api.objects.chemicals.read_name
      tags:
        - Chemicals
      summary: Read Chemicals by name.
      description: Return a list of Chemicals matching the name submitted.
      parameters:
        - name: chemical_name
          in: path
          description: Name of the Chemical to search and return.
          type: string
          required: True
      responses:
        200:
          description: Successfully found Chemicals matching name submitted.
          schema:
            type: object
            properties:
              chemicalid:
                type: integer
                description: ID of the Chemical returned.
              chemical_name:
                type: string
                description: Name of the Chemical returned.
              chemical_brand:
                type: string
                description: Brand of the Chemical returned.
              chemical_unit:
                type: string
                description: Unit of measurement for the Chemical returned.

  /chemicals/{chemical_brand}:
    get:
      operationId: api.objects.chemicals.read_brand
      tags:
        - Chemicals
      summary: Read Chemicals by brand.
      description: Return a list of Chemicals matching the brand submitted.
      parameters:
        - name: chemical_brand
          in: path
          description: Brand of the Chemical to search and return.
          type: string
          required: True
      responses:
        200:
          description: Successfully found Chemicals matching brand submitted.
          schema:
            type: object
            properties:
              chemicalid:
                type: integer
                description: ID of the Chemical returned.
              chemical_name:
                type: string
                description: Name of the Chemical returned.
              chemical_brand:
                type: string
                description: Brand of the Chemical returned.
              chemical_unit:
                type: string
                description: Unit of measurement for the Chemical returned.
                
  /tests/types:
    get:
      operationId: api.objects.tests.get_types
      tags:
        - Tests
      summary: Get Test Types.
      description: Get all created types of tests sorted by testtypeid.
      responses:
        200:
          description: Successfully read Test Types table.
          schema:
            type: array
            items:
              properties:
                testtypeid:
                  type: integer
                  description: ID of the Test Type returned.
                test_name:
                  type: string
                  description: Name of the Test returned.
    put:
      operationID: api.objects.tests.create_type
      tags:
        - Tests
      summary: Create Test Type
      description: Create a new type of test for submitting testing data.
      parameters:
        - name: test_type
          in: body
          description: JSON with Test Name to create.
          required: True
          schema:
            type: object
            properties:
              test_name:
                type: string
                description: Name of the test to create.
      responses:
        200:
          description: Successfully created new Test.
        409:
          description: Test with submitted name already exists.


